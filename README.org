#+title: Emacs configuration
#+author: Garoze
#+property: header-args :tangle config.el

* Table of Contents :TOC:
- [[#lexical-binding][Lexical binding]]
- [[#straight-package-manager][Straight package manager]]
  - [[#early-init][Early-init]]
  - [[#bootstrap][Bootstrap]]
  - [[#straightel-fixes][Straight.el fixes]]
- [[#gc][GC]]
- [[#evil][Evil]]
  - [[#evil-custom-keybinds][Evil custom keybinds]]
  - [[#extras][Extras]]
- [[#editor][Editor]]
  - [[#m-x][M-x]]
  - [[#ui][UI]]
  - [[#themes][Themes]]
  - [[#fonts][Fonts]]
  - [[#fix-meta][Fix meta]]
- [[#keybinds][Keybinds]]
- [[#org-mode][Org mode]]

* Lexical binding
#+begin_src elisp
  ;;; -*- lexical-binding: t -*-
#+end_src
* Straight package manager
** Early-init 
Setting the early-init file, so straight.el can work properly
#+begin_src elisp :tangle test.el
  (setq package-enable-at-startup nil)
#+end_src
** Bootstrap
#+begin_src elisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
** Straight.el fixes
Integration with use-package
#+begin_src elisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src
  
* GC
#+begin_src elisp
  (setq gc-cons-threshold 80000000)
  (setq read-process-output-max (* 1024 1024))
#+end_src

* Evil
#+begin_src elisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-keybinding nil)
    (setq evil-search-module 'evil-search)
    (setq evil-split-window-below t)
    (setq evil-vsplit-window-right t)
    (unless (display-graphic-p)
      (setq evil-want-C-i-jump nil))
    :config
    (evil-mode 1)
#+end_src
** Evil custom keybinds
#+begin_src elisp
  (with-eval-after-load 'evil-maps (define-key evil-motion-state-map (kbd "TAB") nil))
#+end_src
** Extras 
*** Evil surround
#+begin_src elisp
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
#+end_src
*** Evil quickscope
#+begin_src elisp
  (use-package evil-quickscope
    :after evil
    :config
    :hook 
    ((prog-mode . turn-on-evil-quickscope-mode)
     (LaTeX-mode . turn-on-evil-quickscope-mode)
     (org-mode . turn-on-evil-quickscope-mode))) 
#+end_src
*** Evil lion
#+begin_src elisp
  (use-package evil-lion
    :straight t
    :config
    (setq evil-lion-left-align-key (kbd "g a"))
    (setq evil-lion-right-align-key (kbd "g A"))
    (evil-lion-mode)) 
#+end_src
*** Evil collection
#+begin_src elisp
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
    (evil-collection-init))
#+end_src
*** Evil Org
#+begin_src elisp
  (use-package evil-org 
    :after org
    :config 
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda () (evil-org-set-key-theme))))

  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
#+end_src

* Editor
** M-x
*** Vertico
#+begin_src elisp
  (use-package vertico
    :custom
    (vertico-scroll-margin 0) 
    (vertico-count 20) 
    (vertico-resize t) 
    (vertico-cycle t) 
    :init
    (vertico-mode))
#+end_src
*** Savehist
#+begin_src elisp
  (use-package savehist
    :init
    (savehist-mode))
#+end_src
*** Orderless
#+begin_src  elisp
  (use-package orderless
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))  
#+end_src
*** Marginalia
#+begin_src elisp
  (use-package marginalia
    :config
    (marginalia-mode))
#+end_src

** UI
*** Disable modes
#+begin_src elisp
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (menu-bar-mode 0)
#+end_src
*** Disable startup message
#+begin_src elisp
  (setq inhibit-startup-message t
        initial-scratch-message ""
        initial-major-mode 'fundamental-mode
        inhibit-splash-screen t)
#+end_src
*** Line numbers 'relative
#+begin_src elisp
  (setq display-line-numbers-type 'relative) 
  (global-display-line-numbers-mode)
#+end_src
** Themes
*** All the icons
#+begin_src elisp
  (use-package all-the-icons
    :if
    (display-graphic-p))
#+end_src
*** Doom themes
#+begin_src elisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t    
          doom-themes-enable-italic t) 
    (load-theme 'doom-one t)

    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+end_src
*** Doom modeline
#+begin_src elisp
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1))
#+end_src

** Fonts
#+begin_src elisp
  (set-face-attribute 'default nil
                      :font "JetBrains Mono"
                      :height 110
                      :weight 'medium)

  (set-face-attribute 'variable-pitch nil
                      :font "Ubuntu"
                      :height 120
                      :weight 'medium)

  (set-face-attribute 'fixed-pitch nil
                      :font "JetBrains Mono"
                      :height 110
                      :weight 'medium)

  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)

  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  (add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))
  (setq-default line-spacing 0.12)
#+end_src
** Fix meta
#+begin_src elisp
  (setq  x-meta-keysym 'super
         x-super-keysym 'meta)
#+end_src
* Keybinds
#+begin_src elisp
  (use-package general
    :config
    (general-evil-setup)

    (general-create-definer nl/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" 
      :global-prefix "M-SPC") 

    (nl/leader-keys
      "SPC" '(execute-extended-command :wk "M-x")
      "." '(find-file :wk "Find file")
      "f c" '((lambda () (interactive) (find-file "~/.emacs.d/init.el")) :wk "Edit emacs config")
      "c" '(comment-line :wk "Comment lines"))

    (nl/leader-keys
      "b" '(:ignore t :wk "buffer")
      "b b" '(switch-to-buffer :wk "Switch buffer")
      "b i" '(ibuffer :wk "Ibuffer")
      "b k" '(kill-this-buffer :wk "Kill this buffer")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Reload buffer"))

    (nl/leader-keys
      "e" '(:ignore t :wk "Evaluate")    
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e" '(eval-expression :wk "Evaluate and elisp expression")
      "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e r" '(eval-region :wk "Evaluate elisp in region")) 

    (nl/leader-keys
      "g" '(:ignore t :wk "Git")
      "g g" '(magit-status :wk "Magit Status"))

    (nl/leader-keys
      "h" '(:ignore t :wk "Help")
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Describe variable")
      "h r r" '(reload-init-file :wk "Reload emacs config"))

    (nl/leader-keys
      "i" '(:ignore t :wk "Indent")
      "i r" '(indent-region :wk "Indent Region"))

    (nl/leader-keys
      "t" '(:ignore t :wk "Toggle")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t t" '(visual-line-mode :wk "Toggle truncated lines"))

    (nl/leader-keys
      "w" '(:ignore t :wk "Windows")
      ;; Window splits
      "w c" '(evil-window-delete :wk "Close window")
      "w n" '(evil-window-new :wk "New window")
      "w s" '(evil-window-split :wk "Horizontal split window")
      "w v" '(evil-window-vsplit :wk "Vertical split window")
      ;; Window motions
      "w h" '(evil-window-left :wk "Window left")
      "w j" '(evil-window-down :wk "Window down")
      "w k" '(evil-window-up :wk "Window up")
      "w l" '(evil-window-right :wk "Window right")
      "w w" '(evil-window-next :wk "Goto next window")
      ;; Move Windows
      "w H" '(buf-move-left :wk "Buffer move left")
      "w J" '(buf-move-down :wk "Buffer move down")
      "w K" '(buf-move-up :wk "Buffer move up")
      "w L" '(buf-move-right :wk "Buffer move right"))
    )
#+end_src
*** Reload init file
#+begin_src elisp
  (defun reload-init-file ()
    (interactive)
    (load-file user-init-file))
#+end_src

* Org mode
